# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)
range_markers = dict(zip([i for i in range(0, 10001, 1000)], [str(i) for i in range(0, 20001, 1000)]))
# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                      dcc.Dropdown(id='select-site',
                             options=[{'label': i, 'value': i} for i in spacex_df['Launch Site'].unique()], 
                             value='Select Site',
                             placeholder='All Sites', 
                             disabled=False),
        
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                #html.Div(dcc.Graph(id='success-pie-container', className='chart-grid')),
                                html.Div(id='success-pie-container', className='chart-grid'),

                                html.Br(),


                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                 html.Div([
                                    html.H2('Select Payload:', style={'margin-right': '2em'}),        
                                    dcc.RangeSlider(id='select-payload',
                                                    min=0, max=10000, step=1000,
                                                    marks = range_markers,
                                                    value=[1000,9000],
                                                    disabled=False)
                                ]),
                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                #html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                # Scatter Chart Display
                                 html.Div(id='scatter-container', className='chart-grid'), 
                                ])
                                

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback( Output(component_id='success-pie-container', component_property='children'),
               Input(component_id='select-site', component_property='value'))

def display_charts(input_site):

    # Pie Chart Launch Success by Site
    data = spacex_df[["class", 'Launch Site']]
    if input_site == None:
        data = data.groupby('Launch Site')['class'].sum().reset_index()
        pie_fig = px.pie(data, values='class', names='Launch Site')
        pie_fig.update_layout(title=f'Total Successes Launch by Site')
    else:
        data = spacex_df[spacex_df['Launch Site']==input_site]
        data = data.groupby(['class'])['class'].count().reset_index(name='count')
        data = data.assign(Outcome = data['class'].apply(lambda x: 'Success' if x==1 else 'Failure'))
        pie_fig = px.pie(data, values='count', names='Outcome')
        pie_fig.update_layout(title=f'Total Successes Launch for Site  {input_site}')
        pie_fig.update_layout(height=400, width=1000)
    
    return [html.Div(className='chart-item', children=[dcc.Graph(figure=pie_fig)], style={'display': 'flex'})]
# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback( Output(component_id='scatter-container', component_property='children'),
               Input(component_id='select-payload', component_property='value'))

def display_charts(input_payload):

    # Scatter Plot Launch Success by Payload
    min_payload = input_payload[0]
    max_payload = input_payload[1]
    data = spacex_df[["Payload Mass (kg)", "class", 'Booster Version Category']]
    data = data[data['Payload Mass (kg)'] >= min_payload]
    data = data[data['Payload Mass (kg)'] <= max_payload]
    scatter_fig = px.scatter(data, x='Payload Mass (kg)', y='class', color='Booster Version Category', color_discrete_sequence=['red', 'blue', 'orange', 'green', 'purple']) 
    scatter_fig.update_layout(title="Correlation between Payload and Success for all Sites", xaxis_title='Payload', yaxis_title=f'Success')
    scatter_fig.update_traces(marker=dict(size=12))
    scatter_fig.update_layout(height=400, width=1200)
    
    return [html.Div(className='chart-item', children=[dcc.Graph(figure=scatter_fig)], style={'display': 'flex'})]

# Run the app
if __name__ == '__main__':
    app.run_server()
